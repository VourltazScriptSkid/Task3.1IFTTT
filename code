#include <WiFiNINA.h>
#include <BH1750FVI.h>
#include <WiFiSSLClient.h>

// Replace with your network credentials
const char* ssid = "Rajiv's Unifi_LoT";
const char* password = "Swatiraj1#";
const char* IFTTTKey = "i_0Q2IrEhAeUviYALkPfU3wsZVaHT1xR_dmaPnu6GUf"; // Replace with your IFTTT Key
const char* eventName = "email_sender"; // Event name you set in IFTTT

// Create an instance of the BH1750FVI sensor
BH1750FVI LightSensor(BH1750FVI::k_DevModeContLowRes);

void setup() {
  Serial.begin(9600);
  LightSensor.begin();
  // Initialize WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  delay(5000); // Wait for the board to acquire an IP address
}

void loop() {
  uint16_t lux = LightSensor.GetLightIntensity();
  bool isSunlight = lux > 50;
  String lightStatus = isSunlight ? "There is light" : "There is no light";

  WiFiSSLClient client;
  const char* host = "maker.ifttt.com";
  const int httpsPort = 443;

  if (!client.connect(host, httpsPort)) {
    Serial.println("Connection to IFTTT failed");
  } else {
    // Make an HTTP POST request
    String url = String("/trigger/") + eventName + "/with/key/" + IFTTTKey;
    String httpRequestData = "{\"value1\":\"" + lightStatus + "\"}";
    client.println("POST " + url + " HTTP/1.1");
    client.println("Host: " + String(host));
    client.println("Content-Type: application/json");
    client.println("Connection: close");
    client.print("Content-Length: ");
    client.println(httpRequestData.length());
    client.println(); // End of headers
    client.println(httpRequestData); // Send the JSON data

    // Wait for the response from IFTTT
    while (client.connected()) {
      String line = client.readStringUntil('\n');
      if (line == "\r") {
        break; // Headers are done, and the body starts.
      }
    }
    while (client.available()) {
      String line = client.readStringUntil('\n');
      Serial.println(line); // Print the response for debugging purposes.
    }
  }
  client.stop(); // Disconnect from the server

  delay(600000); // Delay to prevent too frequent updates
}
